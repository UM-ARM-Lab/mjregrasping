#!/usr/bin/env python
#
# This file defines the hyparparameters for the method.
# The third-to-last argument is the default value,
# and the second-to-last and last arguments define the range of the values.
# For more information, see: http://wiki.ros.org/dynamic_reconfigure/Tutorials
#
# You can run `rosrun rqt_reconfigure rqt_reconfigure` to change the parameters at runtime.

PACKAGE = "mjregrasping"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("iters", int_t, 0, "iters", 3, 0, 10)
gen.add("max_move_to_goal_iters", int_t, 0, "max_move_to_goal_iters", 200, 0, 500)
gen.add("max_grasp_iters", int_t, 0, "max_grasp_iters", 100, 0, 500)
gen.add("max_plan_to_goal_iters", int_t, 0, "max_plan_to_goal_iters", 15, 0, 500)
gen.add("max_grasp_plan_iters", int_t, 0, "max_grasp_plan_iters", 15, 0, 500)
gen.add("warmstart", int_t, 0, "warmstart", 10, 0, 50)
gen.add("move_sub_time_s", double_t, 0, "move_sub_time_s", 0.1, 0, 1)
gen.add("grasp_sub_time_s", double_t, 0, "grasp_sub_time_s", 0.05, 0, 1)
gen.add("plan_settle_steps", int_t, 0, "plan_settle_steps", 10, 0, 100)
gen.add("settle_steps", int_t, 0, "settle_steps", 50, 0, 100)

needs_regrasp = gen.add_group("needs_regrasp")
needs_regrasp.add("frac_max_dq", double_t, 0, "fraw_max_dq", 0.3, 0, 1)

move_to_goal = gen.add_group("move_to_goal")
move_to_goal.add("horizon", int_t, 0, "horizon", 9, 0, 50)
move_to_goal.add("n_samples", int_t, 0, "n_samples", 50, 0, 100)
move_to_goal.add("lambda_", double_t, 0, "lambda_", 0.02, 0, 1)
move_to_goal.add("noise_sigma", double_t, 0, "noise_sigma", 0.2, 0, 1)

grasp_mppi = gen.add_group("grasp_mppi")
grasp_mppi.add("noise_sigma", double_t, 0, "noise_sigma", 0.2, 0, 1)

costs = gen.add_group("costs")
costs.add("min_nongrasping_rope_gripper_dists", double_t, 0, "min_nongrasping_rope_gripper_dists", 0.2, 0, 1)
costs.add("nongrasping_close", double_t, 0, "nongrasping_close", 0.1, 0, 1)
costs.add("cannot_progress", int_t, 0, "cannot_progress", 1000, 0, 10000)
costs.add("near_threshold", double_t, 0, "near_threshold", 0.02, 0, 1)
costs.add("contact_exponent", double_t, 0, "contact_exponent", 0.5, 0, 1)
costs.add("max_contact_cost", double_t, 0, "max_contact_cost", 1, 0, 1)
costs.add("gripper_dir", double_t, 0, "gripper_dir", 2, 0, 100)
costs.add("action", double_t, 0, "action", 0.01, 0, 100)
costs.add("nongrasping_home", double_t, 0, "nongrasping_home", 0.1, 0, 100)
costs.add("contact_cost", double_t, 0, "contact_cost", 1.0, 0, 100)

visualizers = gen.add_group("visuation")
visualizers.add("rr", bool_t, 0, "rr", True)
visualizers.add("rviz", bool_t, 0, "rviz", True)
visualizers.add("mppi_rollouts", bool_t, 0, "mppi_rollouts", True)
visualizers.add("is_planning_alpha", double_t, 0, "is_planning_alpha", 0.2, 0, 1)
visualizers.add("viz_planning", bool_t, 0, "viz_planning", True)

exit(gen.generate(PACKAGE, PACKAGE, "Params"))
